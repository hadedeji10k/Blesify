let bcrypt,User,jwt,env,validateEmail,validatePassword;_8e3‍.x([["default",()=>_8e3‍.o]]);_8e3‍.w("bcryptjs",[["default",["bcrypt"],function(v){bcrypt=v}]]);_8e3‍.w("../models/user",[["default",["User"],function(v){User=v}]]);_8e3‍.w("jsonwebtoken",[["default",["jwt"],function(v){jwt=v}]]);_8e3‍.w("../config/environment/index",[["default",["env"],function(v){env=v}]]);_8e3‍.w("../utils/validateEmail",[["default",["validateEmail"],function(v){validateEmail=v}]]);_8e3‍.w("../utils/validatePassword",[["default",["validatePassword"],function(v){validatePassword=v}]]);

// const User = require("../models/user");





const authenticationService = {
  async createUser(email, password, firstName, lastName) {
      
    const isUserTaken = await validateEmail(email);
    if (isUserTaken) {
      return false;
    }

    const verificationCode = Math.floor(Math.random() * 100000);

    const hashedPassword = await bcrypt.hash(password, 10);

    const newUser = new User({
      firstName,
      lastName,
      name: `${firstName} ${lastName}`,
      email,
      role: "user",
      password: hashedPassword,
      verificationCode,
    });


    await newUser.save();

    let token = jwt.sign(
      {
        userId: newUser._id,
        role: newUser.role,
        email: newUser.email,
        firstName: newUser.firstName,
        lastName: newUser.lastName,
        name: newUser.name,
      },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    return { token, user: newUser };
  },

  async login(email, password) {
    const isPasswordValid = await validatePassword(email, password);

    if (!isPasswordValid) {
      return false
    }

    let user = await User.findOne({ email });

    const token = jwt.sign(
      {
        userId: user._id,
        role: user.role,
        email: user.email,
        firstName: user.firstName,
        lastName: user.lastName,
        name: user.name,
      },
      env.JWT_SECRET,
      { expiresIn: "1h" }
    );
    return { token, user };
  },

  async verifyUser(email, verificationCode) {
    const user = await User.findOne({ email });

    if (user.verificationCode === verificationCode) {
      user.isVerified = true;
      await user.save();
      return user;
    }
    
    return false;
  },
  
  async getUser(userId) {
    const user = await User.findById(userId);
    return user;
  },

  async updateUser(userId, firstName, lastName, email, password) {
    const user = await User.findById(userId);

    if (firstName) {
      user.firstName = firstName;
    }

    if (lastName) {
      user.lastName = lastName;
    }

    if (email) {
      user.email = email;
    }

    if (password) {
      let hashedPassword = await bcrypt.hash(password, 10);
      user.password = hashedPassword;
    }

    await user.save();
    return user;
  },

  async deleteUser(userId) {
    const user = await User.findByIdAndDelete(userId);
    return user;
  },

  async getAllUsers() {
    const users = await User.find({});
    return users;
  },

  async getUserByEmail(email) {
    const user = await User.findOne({ email });
    return user;
  },

  async forgotPassword(email) {
    const user = await User.findOne({ email });

    if (!user) {
      return false;
    }

    const verificationCode = Math.floor(Math.random() * 100000);

    user.verificationCode = verificationCode;

    await user.save();

    return user;
  },

  async resetPassword(email, verificationCode, password) {
    const user = await User.findOne({ email });

    if (!user) {
      return false;
    }

    if (user.verificationCode !== verificationCode) {
      return false;
    }

    const hashedPassword = await bcrypt.hash(password, 10);

    user.password = hashedPassword;
    user.verificationCode = "";

    await user.save();

    return user;
  },

  async updatePassword(userId, oldPassword, newPassword) {
    const user = await User.findById(userId);

    if (!user) {
      return false;
    }

    const isPasswordValid = await bcrypt.compare(oldPassword, user.password);

    if (!isPasswordValid) {
      return false;
    }

    const hashedPassword = await bcrypt.hash(newPassword, 10);

    user.password = hashedPassword;

    await user.save();

    return user;
  },

  async updateUserRole(userId, role) {
    const user = await User.findById(userId);

    if (!user) {
      return false;
    }

    user.role = role;

    await user.save();

    return user;
  },
  
};

_8e3‍.d(authenticationService);
