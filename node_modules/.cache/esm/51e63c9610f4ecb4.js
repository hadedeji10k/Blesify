let successResponseHandler,errorResponseHandler,authService;_10f‍.x([["default",()=>_10f‍.o]]);_10f‍.w("../helpers/successResponseHandler",[["default",["successResponseHandler"],function(v){successResponseHandler=v}]]);_10f‍.w("../helpers/errorResponseHandler",[["default",["errorResponseHandler"],function(v){errorResponseHandler=v}]]);_10f‍.w("../services/authenticationService",[["default",["authService"],function(v){authService=v}]]);



const authenticationController = {
  createUser: async (req, res) => {
    try {
      const { email, password, firstName, lastName } = req.body;

      const user = await authService.createUser(
        email,
        password,
        firstName,
        lastName
      );

      if (user) {
        return successResponseHandler(
          res,
          201,
          user,
          "User created successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "User already exists", false);
      }
    } catch (error) {
      errorResponseHandler(res, 500, "Request Not Processed", false);
    }
  },

  login: async (req, res, next) => {
    const { email, password } = req.body;
    try {
      const user = await authService.login(email, password);
      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User logged in successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "Invalid credentials", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  getUser: async (req, res, next) => {
    const userId = req.body.userId || req.params.userId;

    try {
      const user = await authService.getUser(userId);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User fetched successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "User not found", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  getAllUsers: async (req, res, next) => {
    try {
      const users = await authService.getAllUsers();

      if (users) {
        return successResponseHandler(
          res,
          200,
          users,
          "Users fetched successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "Users not found", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  updateUser: async (req, res, next) => {
    const userId = req.body.userId || req.params.userId;
    const { firstName, lastName, email, password } = req.body;

    try {
      const user = await authService.updateUser(
        userId,
        firstName,
        lastName,
        email,
        password
      );

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User updated successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "User not found", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  deleteUser: async (req, res, next) => {
    const userId = req.body.userId || req.params.userId;

    try {
      const user = await authService.deleteUser(userId);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User deleted successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "User not found", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  updateUserRole: async (req, res, next) => {
    const { userId, role } = req.body;

    try {
      const user = await authService.updateUserRole(userId, role);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User role updated successfully",
          true
        );
      } else {
        return errorResponseHandler(
          res,
          400,
          "User not found or role not updated successfully",
          false
        );
      }
    } catch (error) {
      return next(error);
    }
  },

  getUserByEmail: async (req, res, next) => {
    const email = req.body.email || req.params.email;

    try {
      const user = await authService.getUserByEmail(email);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User fetched successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "User not found", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  verifyUser: async (req, res, next) => {
    const { email, verificationCode } = req.body;

    try {
      const user = await authService.verifyUser(email, verificationCode);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "User verified successfully",
          true
        );
      } else {
        return errorResponseHandler(
          res,
          400,
          "User not found or not verified",
          false
        );
      }
    } catch (error) {
      return next(error);
    }
  },

  sendVerificationCode: async (req, res, next) => {
    const { email } = req.body;

    try {
      const user = await authService.sendVerificationCode(email);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "Verification code sent successfully",
          true
        );
      } else {
        return errorResponseHandler(res, 400, "User not found", false);
      }
    } catch (error) {
      return next(error);
    }
  },

  forgotPassword: async (req, res, next) => {
    const { email } = req.body;

    try {
      const user = await authService.forgotPassword(email);

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "Password reset code sent successfully",
          true
        );
      } else {
        return errorResponseHandler(
          res,
          400,
          "User not found or code not sent successfully",
          false
        );
      }
    } catch (error) {
      return next(error);
    }
  },

  resetPassword: async (req, res, next) => {
    const { email, verificationCode, password } = req.body;

    try {
      const user = await authService.resetPassword(
        email,
        verificationCode,
        password
      );

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "Password reset successfully",
          true
        );
      } else {
        return errorResponseHandler(
          res,
          400,
          "User not found or password not reset successfully",
          false
        );
      }
    } catch (error) {
      return next(error);
    }
  },

  updatePassword: async (req, res, next) => {
    const { userId, oldPassword, newPassword } = req.body;

    try {
      const user = await authService.updatePassword(
        userId,
        oldPassword,
        newPassword
      );

      if (user) {
        return successResponseHandler(
          res,
          200,
          user,
          "Password updated successfully",
          true
        );
      } else {
        return errorResponseHandler(
          res,
          400,
          "User not found or password not updated successfully",
          false
        );
      }
    } catch (error) {
      return next(error);
    }
  },
};

_10f‍.d(authenticationController);
